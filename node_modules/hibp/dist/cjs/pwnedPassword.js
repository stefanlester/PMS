'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var JSSHA = require('jssha/dist/sha1');
var pwnedPasswordRange = require('./pwnedPasswordRange.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var JSSHA__default = /*#__PURE__*/_interopDefaultLegacy(JSSHA);

/**
 * Fetches the number of times the the given password has been exposed in a
 * breach (0 indicating no exposure). The password is given in plain text, but
 * only the first 5 characters of its SHA-1 hash will be submitted to the API.
 *
 * @param {string} password a password in plain text
 * @param {object} [options] a configuration object
 * @param {string} [options.baseUrl] a custom base URL for the
 * pwnedpasswords.com API endpoints (default: `https://api.pwnedpasswords.com`)
 * @param {string} [options.userAgent] a custom string to send as the User-Agent
 * field in the request headers (default: `hibp <version>`)
 * @returns {Promise<number>} a Promise which resolves to the number of times
 * the password has been exposed in a breach, or rejects with an Error
 * @example
 * pwnedPassword('f00b4r')
 *   .then(numPwns => {
 *     // truthy check or numeric condition
 *     if (numPwns) {
 *       // ...
 *     } else {
 *       // ...
 *     }
 *   })
 *   .catch(err => {
 *     // ...
 *   });
 * @see https://haveibeenpwned.com/api/v3#PwnedPasswords
 */

function pwnedPassword(password) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var sha1 = new JSSHA__default['default']('SHA-1', 'TEXT');
  sha1.update(password);
  var hash = sha1.getHash('HEX', {
    outputUpper: true
  });
  var prefix = hash.slice(0, 5);
  var suffix = hash.slice(5);
  return pwnedPasswordRange.pwnedPasswordRange(prefix, options) // filter to matching suffix
  .then(function (arr) {
    return arr.filter(function (item) {
      return item.suffix === suffix;
    });
  }) // return count if match, 0 if not
  .then(function (arr) {
    return arr[0] ? arr[0].count : 0;
  });
}

exports.pwnedPassword = pwnedPassword;
//# sourceMappingURL=pwnedPassword.js.map
