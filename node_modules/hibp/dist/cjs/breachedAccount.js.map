{"version":3,"file":"breachedAccount.js","sources":["../../src/breachedAccount.ts"],"sourcesContent":["import { Breach } from './api/haveibeenpwned/types';\nimport { fetchFromApi } from './api/haveibeenpwned';\n\n/**\n * Fetches breach data for a specific account.\n *\n * ***Warning (July 18, 2019):***\n *\n * `haveibeenpwned.com` now requires an API key from\n * https://haveibeenpwned.com/API/Key for the `breachedaccount` endpoint. The\n * `apiKey` option here is not explicitly required, but direct requests made\n * without it (that is, without specifying a `baseUrl` to a proxy that inserts a\n * valid API key on your behalf) will fail.\n *\n * @param {string} account a username or email address\n * @param {object} [options] a configuration object\n * @param {string} [options.apiKey] an API key from\n * https://haveibeenpwned.com/API/Key (default: undefined)\n * @param {string} [options.domain] a domain by which to filter the results\n * (default: all domains)\n * @param {boolean} [options.includeUnverified] include \"unverified\" breaches in\n * the results (default: true)\n * @param {boolean} [options.truncate] truncate the results to only include\n * the name of each breach (default: true)\n * @param {string} [options.baseUrl] a custom base URL for the\n * haveibeenpwned.com API endpoints (default:\n * `https://haveibeenpwned.com/api/v3`)\n * @param {string} [options.userAgent] a custom string to send as the User-Agent\n * field in the request headers (default: `hibp <version>`)\n * @returns {(Promise<Breach[]> | Promise<null>)} a Promise which resolves to an\n * array of breach objects (or null if no breaches were found), or rejects with\n * an Error\n * @example\n * breachedAccount('foo', { apiKey: 'my-api-key' })\n *   .then(data => {\n *     if (data) {\n *       // ...\n *     } else {\n *       // ...\n *     }\n *   })\n *   .catch(err => {\n *     // ...\n *   });\n * @example\n * breachedAccount('bar', {\n *   includeUnverified: false,\n *   baseUrl: 'https://my-hibp-proxy:8080',\n * })\n *   .then(data => {\n *     if (data) {\n *       // ...\n *     } else {\n *       // ...\n *     }\n *   })\n *   .catch(err => {\n *     // ...\n *   });\n * @example\n * breachedAccount('baz', {\n *   apiKey: 'my-api-key',\n *   domain: 'adobe.com',\n *   truncate: false,\n *   userAgent: 'my-app 1.0'\n * })\n *   .then(data => {\n *     if (data) {\n *       // ...\n *     } else {\n *       // ...\n *     }\n *   })\n *   .catch(err => {\n *     // ...\n *   });\n */\nexport function breachedAccount(\n  account: string,\n  options: {\n    apiKey?: string;\n    domain?: string;\n    includeUnverified?: boolean;\n    truncate?: boolean;\n    baseUrl?: string;\n    userAgent?: string;\n  } = {\n    includeUnverified: true,\n    truncate: true,\n  },\n): Promise<Breach[] | null> {\n  const endpoint = `/breachedaccount/${encodeURIComponent(account)}?`;\n  const params: Array<string> = [];\n  if (options.domain) {\n    params.push(`domain=${encodeURIComponent(options.domain)}`);\n  }\n  if (options.includeUnverified === false) {\n    params.push('includeUnverified=false');\n  }\n  if (options.truncate === false) {\n    params.push('truncateResponse=false');\n  }\n  return fetchFromApi(`${endpoint}${params.join('&')}`, {\n    apiKey: options.apiKey,\n    baseUrl: options.baseUrl,\n    userAgent: options.userAgent,\n  }) as Promise<Breach[] | null>;\n}\n"],"names":["breachedAccount","account","options","includeUnverified","truncate","endpoint","encodeURIComponent","params","domain","push","fetchFromApi","join","apiKey","baseUrl","userAgent"],"mappings":";;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA0EgBA,gBACdC;MACAC,8EAOI;AACFC,IAAAA,iBAAiB,EAAE,IADjB;AAEFC,IAAAA,QAAQ,EAAE;AAFR;AAKJ,MAAMC,QAAQ,8BAAuBC,kBAAkB,CAACL,OAAD,CAAzC,MAAd;AACA,MAAMM,MAAM,GAAkB,EAA9B;;AACA,MAAIL,OAAO,CAACM,MAAZ,EAAoB;AAClBD,IAAAA,MAAM,CAACE,IAAP,kBAAsBH,kBAAkB,CAACJ,OAAO,CAACM,MAAT,CAAxC;AACD;;AACD,MAAIN,OAAO,CAACC,iBAAR,KAA8B,KAAlC,EAAyC;AACvCI,IAAAA,MAAM,CAACE,IAAP,CAAY,yBAAZ;AACD;;AACD,MAAIP,OAAO,CAACE,QAAR,KAAqB,KAAzB,EAAgC;AAC9BG,IAAAA,MAAM,CAACE,IAAP,CAAY,wBAAZ;AACD;;AACD,SAAOC,yBAAY,WAAIL,QAAJ,SAAeE,MAAM,CAACI,IAAP,CAAY,GAAZ,CAAf,GAAmC;AACpDC,IAAAA,MAAM,EAAEV,OAAO,CAACU,MADoC;AAEpDC,IAAAA,OAAO,EAAEX,OAAO,CAACW,OAFmC;AAGpDC,IAAAA,SAAS,EAAEZ,OAAO,CAACY;AAHiC,GAAnC,CAAnB;AAKD;;;;"}