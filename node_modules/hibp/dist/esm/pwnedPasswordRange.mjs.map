{"version":3,"file":"pwnedPasswordRange.mjs","sources":["../../src/pwnedPasswordRange.ts"],"sourcesContent":["import { fetchFromApi } from './api/pwnedpasswords';\n\nexport interface PwnedPasswordSuffix {\n  suffix: string;\n  count: number;\n}\n\n/**\n * An object representing an exposed password hash suffix (corresponding to a\n * given hash prefix) and how many times it occurred in the Pwned Passwords\n * repository.\n *\n * @typedef {object} PwnedPasswordSuffix\n * @property {string} suffix\n * @property {number} count\n */\n\n/**\n * Fetches the SHA-1 hash suffixes for the given 5-character SHA-1 hash prefix.\n *\n * When a password hash with the same first 5 characters is found in the Pwned\n * Passwords repository, the API will respond with an HTTP 200 and include the\n * suffix of every hash beginning with the specified prefix, followed by a count\n * of how many times it appears in the data set. This function parses the\n * response and returns a more structured format.\n *\n * @param {string} prefix the first 5 characters of a SHA-1 password hash (case\n * insensitive)\n * @param {object} [options] a configuration object\n * @param {string} [options.baseUrl] a custom base URL for the\n * pwnedpasswords.com API endpoints (default: `https://api.pwnedpasswords.com`)\n * @param {string} [options.userAgent] a custom string to send as the User-Agent\n * field in the request headers (default: `hibp <version>`)\n * @returns {Promise<PwnedPasswordSuffix[]>} a Promise which resolves to an\n * array of objects, each containing the `suffix` that when matched with the\n * prefix composes the complete hash, and a `count` of how many times it appears\n * in the breached password data set, or rejects with an Error\n *\n * @example\n * pwnedPasswordRange('5BAA6')\n *   .then(results => {\n *     // results will have the following shape:\n *     // [\n *     //   { suffix: \"003D68EB55068C33ACE09247EE4C639306B\", count: 3 },\n *     //   { suffix: \"012C192B2F16F82EA0EB9EF18D9D539B0DD\", count: 1 },\n *     //   ...\n *     // ]\n *   })\n * @example\n * const suffix = '1E4C9B93F3F0682250B6CF8331B7EE68FD8';\n * pwnedPasswordRange('5BAA6')\n *   // filter to matching suffix\n *   .then(results => results.filter(row => row.suffix === suffix))\n *   // return count if match, 0 if not\n *   .then(results => (results[0] ? results[0].count : 0))\n *   .catch(err => {\n *     // ...\n *   });\n * @see https://haveibeenpwned.com/api/v3#SearchingPwnedPasswordsByRange\n */\nexport function pwnedPasswordRange(\n  prefix: string,\n  options: { baseUrl?: string; userAgent?: string } = {},\n): Promise<PwnedPasswordSuffix[]> {\n  return (\n    fetchFromApi(`/range/${encodeURIComponent(prefix)}`, options)\n      // create array from lines of text in response body\n      .then((data) => data.split('\\n'))\n      // convert into array of objects containing suffix and count for each line\n      .then((results) =>\n        results.map((row) => ({\n          suffix: row.split(':')[0],\n          count: parseInt(row.split(':')[1], 10),\n        })),\n      )\n  );\n}\n"],"names":["pwnedPasswordRange","prefix","options","fetchFromApi","encodeURIComponent","then","data","split","results","map","row","suffix","count","parseInt"],"mappings":";;AAOA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA2CgBA,mBACdC;MACAC,8EAAoD;AAEpD,SACEC,YAAY,kBAAWC,kBAAkB,CAACH,MAAD,CAA7B,GAAyCC,OAAzC,CAAZ;AAAA,GAEGG,IAFH,CAEQ,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACC,KAAL,CAAW,IAAX,CAAV;AAAA,GAFR;AAAA,GAIGF,IAJH,CAIQ,UAACG,OAAD;AAAA,WACJA,OAAO,CAACC,GAAR,CAAY,UAACC,GAAD;AAAA,aAAU;AACpBC,QAAAA,MAAM,EAAED,GAAG,CAACH,KAAJ,CAAU,GAAV,EAAe,CAAf,CADY;AAEpBK,QAAAA,KAAK,EAAEC,QAAQ,CAACH,GAAG,CAACH,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAD,EAAoB,EAApB;AAFK,OAAV;AAAA,KAAZ,CADI;AAAA,GAJR,CADF;AAYD;;;;"}