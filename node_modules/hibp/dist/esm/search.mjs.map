{"version":3,"file":"search.mjs","sources":["../../src/search.ts"],"sourcesContent":["import { Breach, Paste } from './api/haveibeenpwned/types';\nimport { breachedAccount } from './breachedAccount';\nimport { pasteAccount } from './pasteAccount';\n\nexport interface SearchResults {\n  breaches: Breach[] | null;\n  pastes: Paste[] | null;\n}\n\n/**\n * An object representing search results.\n *\n * @typedef {object} SearchResults\n * @property {(Breach[] | null)} breaches\n * @property {(Paste[] | null)} pastes\n */\n\n/**\n * Fetches all breaches and all pastes associated with the provided account\n * (email address or username). Note that the remote API does not support\n * querying pastes by username (only email addresses), so in the event the\n * provided account is not a valid email address, only breach data is queried\n * and the \"pastes\" field of the resulting object will always be null. This is\n * exactly how searching via the current web interface behaves, which this\n * convenience method is designed to mimic.\n *\n * ***Warning (July 18, 2019):***\n *\n * `haveibeenpwned.com` now requires an API key from\n * https://haveibeenpwned.com/API/Key for the `breachedaccount` and\n * `pasteaccount` endpoints. The  `apiKey` option here is not explicitly\n * required, but direct requests made without it (that is, without specifying a\n * `baseUrl` to a proxy that inserts a valid API key on your behalf) will fail.\n *\n * @param {string} account an email address or username\n * @param {object} [breachOptions] a configuration object pertaining to breach\n * queries\n * @param {string} [breachOptions.apiKey] an API key from\n * https://haveibeenpwned.com/API/Key\n * @param {string} [breachOptions.domain] a domain by which to filter the\n * results (default: all domains)\n * @param {boolean} [breachOptions.truncate] truncate the results to only\n * include the name of each breach (default: true)\n * @param {string} [breachOptions.baseUrl] a custom base URL for the\n * haveibeenpwned.com API endpoints (default:\n * `https://haveibeenpwned.com/api/v3`)\n * @param {string} [breachOptions.userAgent] a custom string to send as the\n * User-Agent field in the request headers (default: `hibp <version>`)\n * @returns {Promise<SearchResults>} a Promise which resolves to an object\n * containing a \"breaches\" key (which can be null or an array of breach objects)\n * and a \"pastes\" key (which can be null or an array of paste objects), or\n * rejects with an Error\n * @example\n * search('foo', { apiKey: 'my-api-key' })\n *   .then(data => {\n *     if (data.breaches || data.pastes) {\n *       // ...\n *     } else {\n *       // ...\n *     }\n *   })\n *   .catch(err => {\n *     // ...\n *   });\n * @example\n * search('nobody@nowhere.com', { apiKey: 'my-api-key', truncate: false })\n *   .then(data => {\n *     if (data.breaches || data.pastes) {\n *       // ...\n *     } else {\n *       // ...\n *     }\n *   })\n *   .catch(err => {\n *     // ...\n *   });\n *\n * @see https://haveibeenpwned.com/\n */\nexport function search(\n  account: string,\n  breachOptions: {\n    apiKey?: string;\n    domain?: string;\n    truncate?: boolean;\n    baseUrl?: string;\n    userAgent?: string;\n  } = {\n    truncate: true,\n  },\n): Promise<SearchResults> {\n  const { apiKey, baseUrl, userAgent } = breachOptions;\n\n  return Promise.all([\n    breachedAccount(account, breachOptions),\n    // This email regex is garbage but it seems to be what the API uses:\n    /^.+@.+$/.test(account)\n      ? pasteAccount(account, { apiKey, baseUrl, userAgent })\n      : null,\n  ]).then(\n    // Avoid array destructuring here to prevent need for Babel helpers\n    (promises) => ({\n      breaches: promises[0],\n      pastes: promises[1],\n    }),\n  );\n}\n"],"names":["search","account","breachOptions","truncate","apiKey","baseUrl","userAgent","Promise","all","breachedAccount","test","pasteAccount","then","promises","breaches","pastes"],"mappings":";;;AASA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA8DgBA,OACdC;MACAC,oFAMI;AACFC,IAAAA,QAAQ,EAAE;AADR;MAIIC,SAA+BF,cAA/BE;MAAQC,UAAuBH,cAAvBG;MAASC,YAAcJ,cAAdI;AAEzB,SAAOC,OAAO,CAACC,GAAR,CAAY,CACjBC,eAAe,CAACR,OAAD,EAAUC,aAAV,CADE;AAGjB,YAAUQ,IAAV,CAAeT,OAAf,IACIU,YAAY,CAACV,OAAD,EAAU;AAAEG,IAAAA,MAAM,EAANA,MAAF;AAAUC,IAAAA,OAAO,EAAPA,OAAV;AAAmBC,IAAAA,SAAS,EAATA;AAAnB,GAAV,CADhB,GAEI,IALa,CAAZ,EAMJM,IANI;AAQL,YAACC,QAAD;AAAA,WAAe;AACbC,MAAAA,QAAQ,EAAED,QAAQ,CAAC,CAAD,CADL;AAEbE,MAAAA,MAAM,EAAEF,QAAQ,CAAC,CAAD;AAFH,KAAf;AAAA,GARK,CAAP;AAaD;;;;"}