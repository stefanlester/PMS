{"version":3,"file":"pwnedPassword.mjs","sources":["../../src/pwnedPassword.ts"],"sourcesContent":["import JSSHA from 'jssha/dist/sha1';\nimport { pwnedPasswordRange } from './pwnedPasswordRange';\n\n/**\n * Fetches the number of times the the given password has been exposed in a\n * breach (0 indicating no exposure). The password is given in plain text, but\n * only the first 5 characters of its SHA-1 hash will be submitted to the API.\n *\n * @param {string} password a password in plain text\n * @param {object} [options] a configuration object\n * @param {string} [options.baseUrl] a custom base URL for the\n * pwnedpasswords.com API endpoints (default: `https://api.pwnedpasswords.com`)\n * @param {string} [options.userAgent] a custom string to send as the User-Agent\n * field in the request headers (default: `hibp <version>`)\n * @returns {Promise<number>} a Promise which resolves to the number of times\n * the password has been exposed in a breach, or rejects with an Error\n * @example\n * pwnedPassword('f00b4r')\n *   .then(numPwns => {\n *     // truthy check or numeric condition\n *     if (numPwns) {\n *       // ...\n *     } else {\n *       // ...\n *     }\n *   })\n *   .catch(err => {\n *     // ...\n *   });\n * @see https://haveibeenpwned.com/api/v3#PwnedPasswords\n */\nexport function pwnedPassword(\n  password: string,\n  options: { baseUrl?: string; userAgent?: string } = {},\n): Promise<number> {\n  const sha1 = new JSSHA('SHA-1', 'TEXT');\n  sha1.update(password);\n  const hash = sha1.getHash('HEX', { outputUpper: true });\n  const prefix = hash.slice(0, 5);\n  const suffix = hash.slice(5);\n\n  return (\n    pwnedPasswordRange(prefix, options)\n      // filter to matching suffix\n      .then((arr) => arr.filter((item) => item.suffix === suffix))\n      // return count if match, 0 if not\n      .then((arr) => (arr[0] ? arr[0].count : 0))\n  );\n}\n"],"names":["pwnedPassword","password","options","sha1","JSSHA","update","hash","getHash","outputUpper","prefix","slice","suffix","pwnedPasswordRange","then","arr","filter","item","count"],"mappings":";;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA4BgBA,cACdC;MACAC,8EAAoD;AAEpD,MAAMC,IAAI,GAAG,IAAIC,KAAJ,CAAU,OAAV,EAAmB,MAAnB,CAAb;AACAD,EAAAA,IAAI,CAACE,MAAL,CAAYJ,QAAZ;AACA,MAAMK,IAAI,GAAGH,IAAI,CAACI,OAAL,CAAa,KAAb,EAAoB;AAAEC,IAAAA,WAAW,EAAE;AAAf,GAApB,CAAb;AACA,MAAMC,MAAM,GAAGH,IAAI,CAACI,KAAL,CAAW,CAAX,EAAc,CAAd,CAAf;AACA,MAAMC,MAAM,GAAGL,IAAI,CAACI,KAAL,CAAW,CAAX,CAAf;AAEA,SACEE,kBAAkB,CAACH,MAAD,EAASP,OAAT,CAAlB;AAAA,GAEGW,IAFH,CAEQ,UAACC,GAAD;AAAA,WAASA,GAAG,CAACC,MAAJ,CAAW,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACL,MAAL,KAAgBA,MAA1B;AAAA,KAAX,CAAT;AAAA,GAFR;AAAA,GAIGE,IAJH,CAIQ,UAACC,GAAD;AAAA,WAAUA,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAH,CAAOG,KAAhB,GAAwB,CAAlC;AAAA,GAJR,CADF;AAOD;;;;"}