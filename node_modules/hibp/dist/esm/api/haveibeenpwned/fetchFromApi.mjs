import fetch from 'isomorphic-unfetch';
import { name, version } from '../../package.mjs';
import { TOO_MANY_REQUESTS, NOT_FOUND, FORBIDDEN, UNAUTHORIZED, BAD_REQUEST } from './responses.mjs';

function blockedWithRayId(rayId) {
  return "Request blocked, contact haveibeenpwned.com if this continues (Ray ID: ".concat(rayId, ")");
}
/**
 * Fetches data from the supplied API endpoint.
 *
 * HTTP status code 200 returns an Object (data found).
 * HTTP status code 404 returns null (no data found).
 * HTTP status code 400 throws an Error (bad request).
 * HTTP status code 401 throws an Error (unauthorized).
 * HTTP status code 403 throws an Error (forbidden).
 * HTTP status code 429 throws an Error (too many requests).
 *
 * @internal
 * @private
 * @param {string} endpoint the API endpoint to query
 * @param {object} [options] a configuration object
 * @param {string} [options.apiKey] an API key from
 * https://haveibeenpwned.com/API/Key
 * @param {string} [options.baseUrl] a custom base URL for the
 * haveibeenpwned.com API endpoints (default:
 * `https://haveibeenpwned.com/api/v3`)
 * @param {string} [options.userAgent] a custom string to send as the User-Agent
 * field in the request headers (default: `hibp <version>`)
 * @returns {Promise<ApiData>} a Promise which resolves to the data resulting
 * from the query (or null for 404 Not Found responses), or rejects with an
 * Error
 */


function fetchFromApi(endpoint) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      apiKey = _ref.apiKey,
      _ref$baseUrl = _ref.baseUrl,
      baseUrl = _ref$baseUrl === void 0 ? 'https://haveibeenpwned.com/api/v3' : _ref$baseUrl,
      userAgent = _ref.userAgent;

  var headers = {};

  if (apiKey) {
    headers['HIBP-API-Key'] = apiKey;
  }

  if (userAgent) {
    headers['User-Agent'] = userAgent;
  } // Provide a default User-Agent when running outside the browser


  if (!userAgent && typeof navigator === 'undefined') {
    headers['User-Agent'] = "".concat(name, " ").concat(version);
  }

  var config = {
    headers: headers
  };
  var url = "".concat(baseUrl.replace(/\/$/g, '')).concat(endpoint);
  return fetch(url, config).then(function (res) {
    if (res.ok) return res.json();

    switch (res.status) {
      case BAD_REQUEST.status:
        throw new Error(BAD_REQUEST.statusText);

      case UNAUTHORIZED.status:
        return res.json().then(function (body) {
          throw new Error(body.message);
        });

      case FORBIDDEN.status:
        {
          var rayId = res.headers.get('cf-ray');

          if (rayId) {
            throw new Error(blockedWithRayId(rayId));
          }

          throw new Error(FORBIDDEN.statusText);
        }

      case NOT_FOUND.status:
        return null;

      case TOO_MANY_REQUESTS.status:
        return res.json().then(function (body) {
          throw new Error(body.message);
        });

      default:
        throw new Error(res.statusText);
    }
  });
}

export { fetchFromApi };
//# sourceMappingURL=fetchFromApi.mjs.map
